/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.agilesolutions.boot.controller;

import java.util.Optional;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import com.agilesolutions.boot.model.Car;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-02-23T14:53:23.568+01:00[Europe/Berlin]")

@Validated
@Api(value = "api", description = "the api API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/cars
     *
     * @param car  (optional)
     * @return default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "addCar", notes = "", response = Car.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "default response", response = Car.class) })
    @RequestMapping(value = "/api/cars",
        produces = { "*/*" }, 
        method = RequestMethod.POST)
    default ResponseEntity<Car> addCar(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Car car) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"color\" : \"color\", \"year\" : 6, \"price\" : 1, \"model\" : \"model\", \"id\" : 0, \"brand\" : \"brand\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/cars/{id}
     *
     * @param id  (required)
     * @return default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "deleteCar", notes = "", response = String.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "default response", response = String.class) })
    @RequestMapping(value = "/api/cars/{id}",
        produces = { "*/*" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<String> deleteCar(@ApiParam(value = "",required=true) @PathVariable("id") Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/cars/{id}
     *
     * @param id  (required)
     * @return default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "fetchCar", notes = "", response = Car.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "default response", response = Car.class) })
    @RequestMapping(value = "/api/cars/{id}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Car> fetchCar(@ApiParam(value = "",required=true) @PathVariable("id") Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"color\" : \"color\", \"year\" : 6, \"price\" : 1, \"model\" : \"model\", \"id\" : 0, \"brand\" : \"brand\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/cars/graph
     *
     * @return default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "fetchCarGrapg", notes = "", response = Object.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "default response", response = Object.class) })
    @RequestMapping(value = "/api/cars/graph",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Object> fetchCarGrapg() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/cars
     *
     * @param auth  (required)
     * @return default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "getCars", notes = "", response = Object.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "default response", response = Object.class) })
    @RequestMapping(value = "/api/cars",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Object> getCars(@NotNull @ApiParam(value = "", required = true, allowableValues = "RSA, DSS, aNULL, DH, ECDH, KRB5, ECDSA, PSK, GOST94, GOST01, FZA, SRP, ANY") @Valid @RequestParam(value = "auth", required = true) String auth) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/version
     *
     * @return default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "showVersion", notes = "", response = String.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "default response", response = String.class) })
    @RequestMapping(value = "/api/version",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    default ResponseEntity<String> showVersion() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
